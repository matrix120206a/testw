name: Testw

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2025
    permissions:
      id-token: write # penting untuk OIDC
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check built-in Tailscale version
        shell: pwsh
        continue-on-error: true
        run: |
          if (Test-Path "C:\Program Files\Tailscale\tailscale.exe") {
            & "C:\Program Files\Tailscale\tailscale.exe" version
          } else {
            Write-Host "‚ùå Tailscale belum terpasang di runner ini."
          }

      # üß© Install versi terbaru Tailscale (biar ada dukungan OAuth)
      - name: Install latest Tailscale
        shell: pwsh
        run: |
          Write-Host "‚¨áÔ∏è Downloading latest Tailscale..."
          Invoke-WebRequest https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe -OutFile tailscale-installer.exe
          Write-Host "üöÄ Installing Tailscale..."
          Start-Process -FilePath .\tailscale-installer.exe -ArgumentList "/quiet" -Wait
          Write-Host "‚úÖ Tailscale updated."

      # üîé Verifikasi versi setelah update
      - name: Check updated Tailscale version
        shell: pwsh
        run: |
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: Connect to Tailscale using reusable key
        shell: pwsh
        run: |
          Write-Host "üîë Connecting to Tailscale using reusable auth key..."
          & "C:\Program Files\Tailscale\tailscale.exe" up `
            --auth-key "tskey-auth-kK8tTQiJDX11CNTRL-EaeRtjmwjkMRcE9kNkoMkMG3FdRwyTQPA" `
            --unattended `
            --accept-routes `
            --accept-dns=false `
            --hostname "windows-runner-${{ github.run_id }}"


      - name: Display Tailscale IP
        run: |
          & "C:\Program Files\Tailscale\tailscale.exe" ip -4
          
      - name: Disable password complexity
        run: |
          secedit /export /cfg $env:TEMP\secpol.cfg
          (Get-Content $env:TEMP\secpol.cfg).Replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Set-Content $env:TEMP\secpol.cfg
          secedit /configure /db $env:TEMP\secedit.sdb /cfg $env:TEMP\secpol.cfg /areas SECURITYPOLICY
          gpupdate /force

      - name: Create user Matrix
        run: |
          net user Matrix Matrix#1234 /add
          net localgroup "Administrators" Matrix /add
          reg add "HKLM\SOFTWARE\Microsoft\Windows\DWM" /v ForceEffectMode /t REG_DWORD /d 2 /f
          rundll32.exe themecpl.dll,OpenThemeAction "C:\Windows\resources\Themes\dark.theme"
          

      - name: Set Default User Profile (Taskbar + Dark Theme + Wallpaper)
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $artifactUrl = "https://4kwallpapers.com/images/wallpapers/windows-11-dark-mode-blue-stock-official-3840x2400-5630.jpg"
          $themeDir    = "C:\Scripts\"
          $localPath   = Join-Path $themeDir "EnigMano.jpg"
          New-Item -Path $themeDir -ItemType Directory -Force | Out-Null
          if (Test-Path $localPath) { Remove-Item $localPath -Force }
          Invoke-WebRequest -Uri $artifactUrl -OutFile $localPath -UseBasicParsing
                
          
          # Load Default User hive
          REG LOAD HKLM\Default C:\Users\Default\NTUSER.DAT
      
          # Taskbar kiri
          # reg add "HKLM\Default\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v TaskbarAl /t REG_DWORD /d 0 /f
      
          # Dark theme (system + apps)
          reg add "HKLM\Default\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v SystemUsesLightTheme /t REG_DWORD /d 0 /f
          reg add "HKLM\Default\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v AppsUseLightTheme /t REG_DWORD /d 0 /f
      
          # Disable transparency
          # reg add "HKLM\Default\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v EnableTransparency /t REG_DWORD /d 0 /f
      
      
          # Unload hive
          REG UNLOAD HKLM\Default

          
      - name: Enable RDP
        run: |
          # Aktifkan RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          # Izinkan lewat firewall
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          # Tambahkan user Matrix ke grup (tidak error jika sudah ada)
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Matrix" -ErrorAction SilentlyContinue

      - name: Setup Auto Apply Dark Theme on RDP Login
        shell: pwsh
        run: |
          # Buat folder script
          New-Item -ItemType Directory -Path C:\Scripts -Force | Out-Null
          
          # Simpan script ApplyDarkTheme.ps1
          @'
          Start-Process "rundll32.exe" -ArgumentList 'themecpl.dll,OpenThemeAction C:\Windows\resources\Themes\dark.theme'
          RUNDLL32.EXE user32.dll,UpdatePerUserSystemParameters
          '@ | Out-File -FilePath C:\Scripts\ApplyDarkTheme.ps1 -Encoding UTF8
          
          # Daftarkan Scheduled Task untuk user Matrix
          $Action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -File C:\Scripts\ApplyDarkTheme.ps1"
          $Trigger = New-ScheduledTaskTrigger -AtLogOn
          Register-ScheduledTask -Action $Action -Trigger $Trigger -TaskName "ApplyDarkTheme" -User "Matrix" -Force


      - name: Setup Auto Wallpaper on RDP Login
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path C:\Scripts -Force | Out-Null

          # Tulis script baris demi baris biar YAML gak error
          Set-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '$ErrorActionPreference = "Stop"'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value 'try {'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    $artifactUrl = "https://4kwallpapers.com/images/wallpapers/windows-11-dark-mode-blue-stock-official-3840x2400-5630.jpg"'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    $themeDir    = "C:\Scripts\"'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    $localPath   = Join-Path $themeDir "EnigMano.jpg"'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    New-Item -Path $themeDir -ItemType Directory -Force | Out-Null'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value ''
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value ''
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value ''
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    Add-Type @"'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '        using System.Runtime.InteropServices;'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '        public class EnigManoVisual {'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '            [DllImport("user32.dll", SetLastError = true)]'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '            public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '        }'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '"@'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value ''
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $localPath'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name WallpaperStyle -Value 10'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name TileWallpaper -Value 0'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    [EnigManoVisual]::SystemParametersInfo(0x0014, 0, $localPath, 0x0001 -bor 0x0002) | Out-Null'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '}'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value 'catch {'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    Write-Error "Wallpaper setup failed: $_"'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '    exit 1'
          Add-Content -Path C:\Scripts\SetWallpaper.ps1 -Value '}'

          # Register Scheduled Task
          $Action  = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -File C:\Scripts\SetWallpaper.ps1"
          $Trigger = New-ScheduledTaskTrigger -AtLogOn
          Register-ScheduledTask -Action $Action -Trigger $Trigger -TaskName "SetWallpaper" -User "Matrix" -Force

      - name: Ensure local user Matrix exists
        shell: pwsh
        run: |
          if (-not (Get-LocalUser -Name "Matrix" -ErrorAction SilentlyContinue)) {
            Write-Host "üë§ Membuat user Matrix..."
            net user Matrix "12345" /add
            net localgroup Administrators Matrix /add
          } else {
            Write-Host "‚úÖ User Matrix sudah ada."
          }




      - name: Simulate RDP login for user Matrix
        shell: pwsh
        run: |
          Write-Host "üë§ Simulating RDP login for user Matrix..."
          Write-Host "Creating local session via tscon..."

          # Coba cari session aktif milik user Matrix
          $sessionLine = (qwinsta | Select-String "Matrix") | Out-String
          if (-not $sessionLine) {
            Write-Host "‚ö†Ô∏è Tidak ditemukan session Matrix, membuat dummy session..."
            cmd /c "runas /user:Matrix cmd.exe /c exit"
            Start-Sleep -Seconds 3
            $sessionLine = (qwinsta | Select-String "Matrix") | Out-String
          }

          if (-not $sessionLine) {
            Write-Host "‚ùå Gagal menemukan session Matrix setelah dicoba."
            exit 0
          }
          
          $sessionId = ($sessionLine -split "\s+")[2]
          Write-Host "üìü Session ID Matrix: $sessionId"
          tscon $sessionId /dest:console
          Write-Host "‚úÖ Session Matrix berhasil dihubungkan ke console."

      - name: Set wallpaper for Matrix user
        shell: pwsh
        run: |
          $wallpaper = "D:\a\testw\testw\windows-11-dark-mode-blue-stock-official-3840x2400-5630.jpg"
          Write-Host "üñºÔ∏è Setting wallpaper to $wallpaper ..."
          
          # Set wallpaper untuk semua user (termasuk Matrix)
          Set-ItemProperty -path "HKCU:\Control Panel\Desktop\" -name wallpaper -value $wallpaper
          RUNDLL32.EXE user32.dll,UpdatePerUserSystemParameters

          # Pastikan juga di HKU untuk user Matrix (kalau Matrix belum login)
          $sid = (New-Object System.Security.Principal.NTAccount("Matrix")).Translate([System.Security.Principal.SecurityIdentifier]).Value
          $regPath = "Registry::HKEY_USERS\$sid\Control Panel\Desktop"
          if (-not (Test-Path $regPath)) {
            New-Item -Path $regPath -Force | Out-Null
          }
          Set-ItemProperty -Path $regPath -Name wallpaper -Value $wallpaper
          Write-Host "‚úÖ Wallpaper applied to user Matrix"

      - name: Run PowerShell scripts as Matrix user
        shell: pwsh
        run: |
          $pw = "Matrix#1234"
      
          function Run-TaskAsMatrix($taskName, $actionCmd) {
            schtasks /Delete /TN $taskName /F > $null 2>&1
            $start = (Get-Date).AddMinutes(1).ToString("HH:mm")
            Write-Host "‚è≥ Creating scheduled task '$taskName' for Matrix..."
            cmd /c "schtasks /Create /TN `"$taskName`" /TR `"$actionCmd`" /SC ONCE /ST $start /RL HIGHEST /F /RU Matrix /RP `"$pw`""
            Start-Sleep -Seconds 2
            Write-Host "‚ñ∂Ô∏è Starting scheduled task '$taskName'..."
            cmd /c "schtasks /Run /TN `"$taskName`""
      
            # Tunggu hingga selesai
            for ($i=0; $i -lt 60; $i++) {
              Start-Sleep -Seconds 2
              $info = schtasks /Query /TN $taskName /V /FO LIST 2>$null | Out-String
              if ($info -match "Status:\s+Ready" -or $info -match "Status:\s+Unknown" -or $info -match "Status:\s+Could not") {
                break
              }
            }
      
            Write-Host "üßπ Deleting scheduled task '$taskName'..."
            schtasks /Delete /TN $taskName /F > $null 2>&1
          }
      
          # Contoh script yang mau dijalankan oleh user Matrix
          $script1 = 'powershell.exe -ExecutionPolicy Bypass -File "C:\Scripts\ApplyDarkTheme.ps1"'
          $script2 = 'powershell.exe -ExecutionPolicy Bypass -File "C:\Scripts\SetWallpaper.ps1"'
      
          Run-TaskAsMatrix -taskName "Matrix_ApplyDarkTheme" -actionCmd $script1
          Run-TaskAsMatrix -taskName "Matrix_SetWallpaper" -actionCmd $script2
      
          Write-Host "‚úÖ Semua script Matrix sudah dijalankan lewat scheduled task."



      - name: Set Timezone to Asia/Jakarta
        shell: pwsh
        run: |
          tzutil /s "SE Asia Standard Time"

      - name: Keep session alive
        run: |
          Write-Output "Runner is alive. Press Ctrl+C to stop."
          while ($true) { Start-Sleep -Seconds 300 }
